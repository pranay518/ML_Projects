{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Investment Case Study Solution\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Supress Warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Import the numpy and pandas packages\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Checkpoint1 :Data Cleaning1\n",
    "-  ### Subtask 1.1: Import and read\n",
    "\n",
    " Load the companies and rounds2 data (provided on the previous page) into two data frames and name     them `companies` and `rounds2` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permalink</th>\n",
       "      <th>name</th>\n",
       "      <th>homepage_url</th>\n",
       "      <th>category_list</th>\n",
       "      <th>status</th>\n",
       "      <th>country_code</th>\n",
       "      <th>state_code</th>\n",
       "      <th>region</th>\n",
       "      <th>city</th>\n",
       "      <th>founded_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/Organization/-Fame</td>\n",
       "      <td>#fame</td>\n",
       "      <td>http://livfame.com</td>\n",
       "      <td>Media</td>\n",
       "      <td>operating</td>\n",
       "      <td>IND</td>\n",
       "      <td>16</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/Organization/-Qounter</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>http://www.qounter.com</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>operating</td>\n",
       "      <td>USA</td>\n",
       "      <td>DE</td>\n",
       "      <td>DE - Other</td>\n",
       "      <td>Delaware City</td>\n",
       "      <td>04-09-2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/Organization/-The-One-Of-Them-Inc-</td>\n",
       "      <td>(THE) ONE of THEM,Inc.</td>\n",
       "      <td>http://oneofthem.jp</td>\n",
       "      <td>Apps|Games|Mobile</td>\n",
       "      <td>operating</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/Organization/0-6-Com</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>http://www.0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>operating</td>\n",
       "      <td>CHN</td>\n",
       "      <td>22</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>01-01-2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/Organization/004-Technologies</td>\n",
       "      <td>004 Technologies</td>\n",
       "      <td>http://004gmbh.de/en/004-interact</td>\n",
       "      <td>Software</td>\n",
       "      <td>operating</td>\n",
       "      <td>USA</td>\n",
       "      <td>IL</td>\n",
       "      <td>Springfield, Illinois</td>\n",
       "      <td>Champaign</td>\n",
       "      <td>01-01-2010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             permalink                    name  \\\n",
       "0                  /Organization/-Fame                   #fame   \n",
       "1               /Organization/-Qounter                :Qounter   \n",
       "2  /Organization/-The-One-Of-Them-Inc-  (THE) ONE of THEM,Inc.   \n",
       "3                /Organization/0-6-Com                 0-6.com   \n",
       "4       /Organization/004-Technologies        004 Technologies   \n",
       "\n",
       "                        homepage_url  \\\n",
       "0                 http://livfame.com   \n",
       "1             http://www.qounter.com   \n",
       "2                http://oneofthem.jp   \n",
       "3                 http://www.0-6.com   \n",
       "4  http://004gmbh.de/en/004-interact   \n",
       "\n",
       "                                       category_list     status country_code  \\\n",
       "0                                              Media  operating          IND   \n",
       "1  Application Platforms|Real Time|Social Network...  operating          USA   \n",
       "2                                  Apps|Games|Mobile  operating          NaN   \n",
       "3                                        Curated Web  operating          CHN   \n",
       "4                                           Software  operating          USA   \n",
       "\n",
       "  state_code                 region           city  founded_at  \n",
       "0         16                 Mumbai         Mumbai         NaN  \n",
       "1         DE             DE - Other  Delaware City  04-09-2014  \n",
       "2        NaN                    NaN            NaN         NaN  \n",
       "3         22                Beijing        Beijing  01-01-2007  \n",
       "4         IL  Springfield, Illinois      Champaign  01-01-2010  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading compaines.txt, changing the encoding type because of special characters. And then solving the multiple encoding issue.\n",
    "companies = pd.read_csv('../Investment_Assignment/data/companies.txt',encoding='ISO-8859-1',sep='\\t')\n",
    "companies.permalink = companies.permalink.str.encode('ISO-8859-1').str.decode('ascii', 'ignore')\n",
    "companies.name = companies.name.str.encode('ISO-8859-1').str.decode('ascii', 'ignore')\n",
    "companies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>funding_round_code</th>\n",
       "      <th>funded_at</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>/funding-round/9a01d05418af9f794eebff7ace91f638</td>\n",
       "      <td>venture</td>\n",
       "      <td>B</td>\n",
       "      <td>5/1/2015</td>\n",
       "      <td>10000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/ORGANIZATION/-QOUNTER</td>\n",
       "      <td>/funding-round/22dacff496eb7acb2b901dec1dfe5633</td>\n",
       "      <td>venture</td>\n",
       "      <td>A</td>\n",
       "      <td>14-10-2014</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>/funding-round/b44fbb94153f6cdef13083530bb48030</td>\n",
       "      <td>seed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/3/2014</td>\n",
       "      <td>700000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/ORGANIZATION/-THE-ONE-OF-THEM-INC-</td>\n",
       "      <td>/funding-round/650b8f704416801069bb178a1418776b</td>\n",
       "      <td>venture</td>\n",
       "      <td>B</td>\n",
       "      <td>30-01-2014</td>\n",
       "      <td>3406878.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>/funding-round/5727accaeaa57461bd22a9bdd945382d</td>\n",
       "      <td>venture</td>\n",
       "      <td>A</td>\n",
       "      <td>19-03-2008</td>\n",
       "      <td>2000000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink  \\\n",
       "0                  /organization/-fame   \n",
       "1               /ORGANIZATION/-QOUNTER   \n",
       "2               /organization/-qounter   \n",
       "3  /ORGANIZATION/-THE-ONE-OF-THEM-INC-   \n",
       "4                /organization/0-6-com   \n",
       "\n",
       "                           funding_round_permalink funding_round_type  \\\n",
       "0  /funding-round/9a01d05418af9f794eebff7ace91f638            venture   \n",
       "1  /funding-round/22dacff496eb7acb2b901dec1dfe5633            venture   \n",
       "2  /funding-round/b44fbb94153f6cdef13083530bb48030               seed   \n",
       "3  /funding-round/650b8f704416801069bb178a1418776b            venture   \n",
       "4  /funding-round/5727accaeaa57461bd22a9bdd945382d            venture   \n",
       "\n",
       "  funding_round_code   funded_at  raised_amount_usd  \n",
       "0                  B    5/1/2015         10000000.0  \n",
       "1                  A  14-10-2014                NaN  \n",
       "2                NaN    1/3/2014           700000.0  \n",
       "3                  B  30-01-2014          3406878.0  \n",
       "4                  A  19-03-2008          2000000.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading rounds2.csv, changing the encoding type because of special characters. And then solving the multiple encoding issue.\n",
    "rounds2 = pd.read_csv('../Investment_Assignment/data/rounds2.csv',encoding='ISO-8859-1')\n",
    "rounds2.company_permalink = rounds2.company_permalink.str.encode('ISO-8859-1').str.decode('ascii', 'ignore')\n",
    "rounds2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-  ### Subtask 1.2: Understand the Dataset\n",
    "\n",
    "    - How many unique companies are present in `rounds2`?\n",
    "    - How many unique companies are present in `companies`?\n",
    "    - Are there any companies in the `rounds2` file which are not present in `companies`? Answer yes       or no: **Y/N**\n",
    "    - Merge the two data frames so that all variables (columns) in the `companies` frame are added to       the `rounds2` data frame. Name the merged frame `master_frame`. How many observations are             present in `master_frame`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66368\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count                       114949\n",
       "unique                       66368\n",
       "top       /organization/solarflare\n",
       "freq                            19\n",
       "Name: company_permalink, dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#How many unique companies are present in rounds2?\n",
    "rounds2['company_permalink'] = rounds2['company_permalink'].str.lower()\n",
    "print(len(rounds2['company_permalink'].unique()))\n",
    "\n",
    "#Reconfirming -\n",
    "rounds2['company_permalink'].str.lower().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66368\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count                      66368\n",
       "unique                     66368\n",
       "top       /organization/agri-neo\n",
       "freq                           1\n",
       "Name: permalink, dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many unique companies are present in companies?\n",
    "companies['permalink'] = companies['permalink'].str.lower()\n",
    "print(len(companies['permalink'].unique()))\n",
    "\n",
    "#Reconfirming -\n",
    "companies['permalink'].str.lower().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Are there any companies in the rounds2 file which are not present in companies?\n",
    "temp1 = pd.DataFrame(rounds2.company_permalink.unique())\n",
    "temp2 = pd.DataFrame(companies.permalink.unique())\n",
    "temp2.equals(temp1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "set()"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(companies['permalink'].unique()).difference(set(rounds2['company_permalink'].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "114949"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Merge the two data frames so that all variables (columns) in the companies frame are added to the rounds2 data frame. Name the merged frame master_frame.\n",
    "master_frame = pd.merge(rounds2, companies, how = 'left', left_on = 'company_permalink', right_on = 'permalink')\n",
    "len(master_frame.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>funding_round_code</th>\n",
       "      <th>funded_at</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>permalink</th>\n",
       "      <th>name</th>\n",
       "      <th>homepage_url</th>\n",
       "      <th>category_list</th>\n",
       "      <th>status</th>\n",
       "      <th>country_code</th>\n",
       "      <th>state_code</th>\n",
       "      <th>region</th>\n",
       "      <th>city</th>\n",
       "      <th>founded_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>/funding-round/9a01d05418af9f794eebff7ace91f638</td>\n",
       "      <td>venture</td>\n",
       "      <td>B</td>\n",
       "      <td>5/1/2015</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>#fame</td>\n",
       "      <td>http://livfame.com</td>\n",
       "      <td>Media</td>\n",
       "      <td>operating</td>\n",
       "      <td>IND</td>\n",
       "      <td>16</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>/funding-round/22dacff496eb7acb2b901dec1dfe5633</td>\n",
       "      <td>venture</td>\n",
       "      <td>A</td>\n",
       "      <td>14-10-2014</td>\n",
       "      <td>NaN</td>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>http://www.qounter.com</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>operating</td>\n",
       "      <td>USA</td>\n",
       "      <td>DE</td>\n",
       "      <td>DE - Other</td>\n",
       "      <td>Delaware City</td>\n",
       "      <td>04-09-2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>/funding-round/b44fbb94153f6cdef13083530bb48030</td>\n",
       "      <td>seed</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1/3/2014</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>http://www.qounter.com</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>operating</td>\n",
       "      <td>USA</td>\n",
       "      <td>DE</td>\n",
       "      <td>DE - Other</td>\n",
       "      <td>Delaware City</td>\n",
       "      <td>04-09-2014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/-the-one-of-them-inc-</td>\n",
       "      <td>/funding-round/650b8f704416801069bb178a1418776b</td>\n",
       "      <td>venture</td>\n",
       "      <td>B</td>\n",
       "      <td>30-01-2014</td>\n",
       "      <td>3406878.0</td>\n",
       "      <td>/organization/-the-one-of-them-inc-</td>\n",
       "      <td>(THE) ONE of THEM,Inc.</td>\n",
       "      <td>http://oneofthem.jp</td>\n",
       "      <td>Apps|Games|Mobile</td>\n",
       "      <td>operating</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>/funding-round/5727accaeaa57461bd22a9bdd945382d</td>\n",
       "      <td>venture</td>\n",
       "      <td>A</td>\n",
       "      <td>19-03-2008</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>http://www.0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>operating</td>\n",
       "      <td>CHN</td>\n",
       "      <td>22</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>Beijing</td>\n",
       "      <td>01-01-2007</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink  \\\n",
       "0                  /organization/-fame   \n",
       "1               /organization/-qounter   \n",
       "2               /organization/-qounter   \n",
       "3  /organization/-the-one-of-them-inc-   \n",
       "4                /organization/0-6-com   \n",
       "\n",
       "                           funding_round_permalink funding_round_type  \\\n",
       "0  /funding-round/9a01d05418af9f794eebff7ace91f638            venture   \n",
       "1  /funding-round/22dacff496eb7acb2b901dec1dfe5633            venture   \n",
       "2  /funding-round/b44fbb94153f6cdef13083530bb48030               seed   \n",
       "3  /funding-round/650b8f704416801069bb178a1418776b            venture   \n",
       "4  /funding-round/5727accaeaa57461bd22a9bdd945382d            venture   \n",
       "\n",
       "  funding_round_code   funded_at  raised_amount_usd  \\\n",
       "0                  B    5/1/2015         10000000.0   \n",
       "1                  A  14-10-2014                NaN   \n",
       "2                NaN    1/3/2014           700000.0   \n",
       "3                  B  30-01-2014          3406878.0   \n",
       "4                  A  19-03-2008          2000000.0   \n",
       "\n",
       "                             permalink                    name  \\\n",
       "0                  /organization/-fame                   #fame   \n",
       "1               /organization/-qounter                :Qounter   \n",
       "2               /organization/-qounter                :Qounter   \n",
       "3  /organization/-the-one-of-them-inc-  (THE) ONE of THEM,Inc.   \n",
       "4                /organization/0-6-com                 0-6.com   \n",
       "\n",
       "             homepage_url                                      category_list  \\\n",
       "0      http://livfame.com                                              Media   \n",
       "1  http://www.qounter.com  Application Platforms|Real Time|Social Network...   \n",
       "2  http://www.qounter.com  Application Platforms|Real Time|Social Network...   \n",
       "3     http://oneofthem.jp                                  Apps|Games|Mobile   \n",
       "4      http://www.0-6.com                                        Curated Web   \n",
       "\n",
       "      status country_code state_code      region           city  founded_at  \n",
       "0  operating          IND         16      Mumbai         Mumbai         NaN  \n",
       "1  operating          USA         DE  DE - Other  Delaware City  04-09-2014  \n",
       "2  operating          USA         DE  DE - Other  Delaware City  04-09-2014  \n",
       "3  operating          NaN        NaN         NaN            NaN         NaN  \n",
       "4  operating          CHN         22     Beijing        Beijing  01-01-2007  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                     venture\n",
       "1                     venture\n",
       "2                        seed\n",
       "3                     venture\n",
       "4                     venture\n",
       "5                     venture\n",
       "6                 undisclosed\n",
       "7                        seed\n",
       "8                     venture\n",
       "9                        seed\n",
       "10                    venture\n",
       "11                    venture\n",
       "12                    venture\n",
       "13                       seed\n",
       "14                undisclosed\n",
       "15                       seed\n",
       "16                       seed\n",
       "17        equity_crowdfunding\n",
       "18        equity_crowdfunding\n",
       "19                undisclosed\n",
       "20           convertible_note\n",
       "21             private_equity\n",
       "22                    venture\n",
       "23           convertible_note\n",
       "24             debt_financing\n",
       "25             debt_financing\n",
       "26             debt_financing\n",
       "27             debt_financing\n",
       "28                    venture\n",
       "29                       seed\n",
       "                 ...         \n",
       "114919                  angel\n",
       "114920                venture\n",
       "114921                  grant\n",
       "114922                venture\n",
       "114923                venture\n",
       "114924                   seed\n",
       "114925                   seed\n",
       "114926                   seed\n",
       "114927                   seed\n",
       "114928         private_equity\n",
       "114929                  angel\n",
       "114930                  grant\n",
       "114931                venture\n",
       "114932                   seed\n",
       "114933                   seed\n",
       "114934                venture\n",
       "114935                  angel\n",
       "114936                venture\n",
       "114937                venture\n",
       "114938                  grant\n",
       "114939                  angel\n",
       "114940                   seed\n",
       "114941                venture\n",
       "114942                   seed\n",
       "114943                   seed\n",
       "114944       convertible_note\n",
       "114945                   seed\n",
       "114946                venture\n",
       "114947                   seed\n",
       "114948                  grant\n",
       "Name: funding_round_type, Length: 114949, dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_frame['funding_round_type']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-  ### Subtask 1.3: Cleaning the Data\n",
    "\n",
    "    - Inspecting Null Values\n",
    "    - Dropping unnecessary columns\n",
    "    - Dropping unnecessary rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company_permalink              0\n",
       "funding_round_permalink        0\n",
       "funding_round_type             0\n",
       "funding_round_code         83809\n",
       "funded_at                      0\n",
       "raised_amount_usd          19990\n",
       "permalink                      0\n",
       "name                           1\n",
       "homepage_url                6134\n",
       "category_list               3410\n",
       "status                         0\n",
       "country_code                8678\n",
       "state_code                 10946\n",
       "region                     10167\n",
       "city                       10164\n",
       "founded_at                 20521\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Inspecting the Null values , column-wise\n",
    "master_frame.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "company_permalink           0.00\n",
      "funding_round_permalink     0.00\n",
      "funding_round_type          0.00\n",
      "funding_round_code         72.91\n",
      "funded_at                   0.00\n",
      "raised_amount_usd          17.39\n",
      "permalink                   0.00\n",
      "name                        0.00\n",
      "homepage_url                5.34\n",
      "category_list               2.97\n",
      "status                      0.00\n",
      "country_code                7.55\n",
      "state_code                  9.52\n",
      "region                      8.84\n",
      "city                        8.84\n",
      "founded_at                 17.85\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Inspecting the Null values percentage , column-wise\n",
    "print(round(100*(master_frame.isnull().sum()/len(master_frame.index)), 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "master_frame = master_frame.drop(['funding_round_code', 'funding_round_permalink', 'funded_at','permalink', 'homepage_url',\n",
    "                                 'state_code', 'region', 'city', 'founded_at','status'], axis = 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "company_permalink      0.00\n",
      "funding_round_type     0.00\n",
      "raised_amount_usd     17.39\n",
      "name                   0.00\n",
      "category_list          2.97\n",
      "country_code           7.55\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Inspecting the Null values percentage again after deletion, column-wise\n",
    "print(round(100*(master_frame.isnull().sum()/len(master_frame.index)), 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>venture</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>venture</td>\n",
       "      <td>NaN</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>seed</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/-the-one-of-them-inc-</td>\n",
       "      <td>venture</td>\n",
       "      <td>3406878.0</td>\n",
       "      <td>(THE) ONE of THEM,Inc.</td>\n",
       "      <td>Apps|Games|Mobile</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>venture</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>CHN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink funding_round_type  raised_amount_usd  \\\n",
       "0                  /organization/-fame            venture         10000000.0   \n",
       "1               /organization/-qounter            venture                NaN   \n",
       "2               /organization/-qounter               seed           700000.0   \n",
       "3  /organization/-the-one-of-them-inc-            venture          3406878.0   \n",
       "4                /organization/0-6-com            venture          2000000.0   \n",
       "\n",
       "                     name                                      category_list  \\\n",
       "0                   #fame                                              Media   \n",
       "1                :Qounter  Application Platforms|Real Time|Social Network...   \n",
       "2                :Qounter  Application Platforms|Real Time|Social Network...   \n",
       "3  (THE) ONE of THEM,Inc.                                  Apps|Games|Mobile   \n",
       "4                 0-6.com                                        Curated Web   \n",
       "\n",
       "  country_code  \n",
       "0          IND  \n",
       "1          USA  \n",
       "2          USA  \n",
       "3          NaN  \n",
       "4          CHN  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>venture</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>seed</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>venture</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>CHN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>/organization/01games-technology</td>\n",
       "      <td>undisclosed</td>\n",
       "      <td>41250.0</td>\n",
       "      <td>01Games Technology</td>\n",
       "      <td>Games</td>\n",
       "      <td>HKG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>/organization/0ndine-biomedical-inc</td>\n",
       "      <td>seed</td>\n",
       "      <td>43360.0</td>\n",
       "      <td>Ondine Biomedical Inc.</td>\n",
       "      <td>Biotechnology</td>\n",
       "      <td>CAN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink funding_round_type  raised_amount_usd  \\\n",
       "0                  /organization/-fame            venture         10000000.0   \n",
       "2               /organization/-qounter               seed           700000.0   \n",
       "4                /organization/0-6-com            venture          2000000.0   \n",
       "6     /organization/01games-technology        undisclosed            41250.0   \n",
       "7  /organization/0ndine-biomedical-inc               seed            43360.0   \n",
       "\n",
       "                     name                                      category_list  \\\n",
       "0                   #fame                                              Media   \n",
       "2                :Qounter  Application Platforms|Real Time|Social Network...   \n",
       "4                 0-6.com                                        Curated Web   \n",
       "6      01Games Technology                                              Games   \n",
       "7  Ondine Biomedical Inc.                                      Biotechnology   \n",
       "\n",
       "  country_code  \n",
       "0          IND  \n",
       "2          USA  \n",
       "4          CHN  \n",
       "6          HKG  \n",
       "7          CAN  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dropping rows based on null columns\n",
    "master_frame = master_frame[~(master_frame['raised_amount_usd'].isnull() | master_frame['country_code'].isnull() |\n",
    "                             master_frame['category_list'].isnull())]\n",
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "77.01589400516751\n"
     ]
    }
   ],
   "source": [
    "#Percentage of retained rows\n",
    "print(100*(len(master_frame.index)/114949))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(88529, 6)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_frame.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2: Funding Type Analysis\n",
    "\n",
    "-  ### Subtask 2.1: Retaining the rows with only four investment types.\n",
    "\n",
    "Spark Funds wants to choose one of these four investment types(venture, angel, seed, and private equity) for each potential investment they will make. So let's observe and see how many funding types are present in `master_frame` and then retain the rows with above-mentioned investment types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "venture                  47809\n",
       "seed                     21095\n",
       "debt_financing            6506\n",
       "angel                     4400\n",
       "grant                     1939\n",
       "private_equity            1820\n",
       "undisclosed               1345\n",
       "convertible_note          1320\n",
       "equity_crowdfunding       1128\n",
       "post_ipo_equity            598\n",
       "product_crowdfunding       330\n",
       "post_ipo_debt              151\n",
       "non_equity_assistance       60\n",
       "secondary_market            28\n",
       "Name: funding_round_type, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Observing the unique funding_round_type\n",
    "master_frame.funding_round_type.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>venture</td>\n",
       "      <td>10000000.0</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>seed</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>venture</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>CHN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>/organization/0ndine-biomedical-inc</td>\n",
       "      <td>seed</td>\n",
       "      <td>43360.0</td>\n",
       "      <td>Ondine Biomedical Inc.</td>\n",
       "      <td>Biotechnology</td>\n",
       "      <td>CAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>/organization/0ndine-biomedical-inc</td>\n",
       "      <td>venture</td>\n",
       "      <td>719491.0</td>\n",
       "      <td>Ondine Biomedical Inc.</td>\n",
       "      <td>Biotechnology</td>\n",
       "      <td>CAN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink funding_round_type  raised_amount_usd  \\\n",
       "0                  /organization/-fame            venture         10000000.0   \n",
       "2               /organization/-qounter               seed           700000.0   \n",
       "4                /organization/0-6-com            venture          2000000.0   \n",
       "7  /organization/0ndine-biomedical-inc               seed            43360.0   \n",
       "8  /organization/0ndine-biomedical-inc            venture           719491.0   \n",
       "\n",
       "                     name                                      category_list  \\\n",
       "0                   #fame                                              Media   \n",
       "2                :Qounter  Application Platforms|Real Time|Social Network...   \n",
       "4                 0-6.com                                        Curated Web   \n",
       "7  Ondine Biomedical Inc.                                      Biotechnology   \n",
       "8  Ondine Biomedical Inc.                                      Biotechnology   \n",
       "\n",
       "  country_code  \n",
       "0          IND  \n",
       "2          USA  \n",
       "4          CHN  \n",
       "7          CAN  \n",
       "8          CAN  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Retaining the rows with only four investment types\n",
    "master_frame = master_frame[(master_frame['funding_round_type'] == 'venture') \n",
    "                            | (master_frame['funding_round_type'] == 'seed')\n",
    "                            | (master_frame['funding_round_type'] == 'angel')\n",
    "                            | (master_frame['funding_round_type'] == 'private_equity')]\n",
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "funding_round_type\n",
       "angel               971573.89\n",
       "private_equity    73938486.28\n",
       "seed                747793.68\n",
       "venture           11724222.69\n",
       "Name: raised_amount_usd, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Average Values of Investments for Each of these Funding Types\n",
    "funding_typ = round(master_frame.groupby('funding_round_type').raised_amount_usd.mean(), 2)\n",
    "funding_typ.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>funding_round_type</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>venture</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/-qounter</td>\n",
       "      <td>seed</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>:Qounter</td>\n",
       "      <td>Application Platforms|Real Time|Social Network...</td>\n",
       "      <td>USA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/0-6-com</td>\n",
       "      <td>venture</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0-6.com</td>\n",
       "      <td>Curated Web</td>\n",
       "      <td>CHN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>/organization/0ndine-biomedical-inc</td>\n",
       "      <td>seed</td>\n",
       "      <td>0.043360</td>\n",
       "      <td>Ondine Biomedical Inc.</td>\n",
       "      <td>Biotechnology</td>\n",
       "      <td>CAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>/organization/0ndine-biomedical-inc</td>\n",
       "      <td>venture</td>\n",
       "      <td>0.719491</td>\n",
       "      <td>Ondine Biomedical Inc.</td>\n",
       "      <td>Biotechnology</td>\n",
       "      <td>CAN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     company_permalink funding_round_type  raised_amount_usd  \\\n",
       "0                  /organization/-fame            venture          10.000000   \n",
       "2               /organization/-qounter               seed           0.700000   \n",
       "4                /organization/0-6-com            venture           2.000000   \n",
       "7  /organization/0ndine-biomedical-inc               seed           0.043360   \n",
       "8  /organization/0ndine-biomedical-inc            venture           0.719491   \n",
       "\n",
       "                     name                                      category_list  \\\n",
       "0                   #fame                                              Media   \n",
       "2                :Qounter  Application Platforms|Real Time|Social Network...   \n",
       "4                 0-6.com                                        Curated Web   \n",
       "7  Ondine Biomedical Inc.                                      Biotechnology   \n",
       "8  Ondine Biomedical Inc.                                      Biotechnology   \n",
       "\n",
       "  country_code  \n",
       "0          IND  \n",
       "2          USA  \n",
       "4          CHN  \n",
       "7          CAN  \n",
       "8          CAN  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Converting $ to million $.\n",
    "master_frame['raised_amount_usd'] = master_frame['raised_amount_usd']/1000000\n",
    "df1 = master_frame\n",
    "#df1.head()\n",
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "funding_round_type\n",
       "angel              0.97\n",
       "private_equity    73.94\n",
       "seed               0.75\n",
       "venture           11.72\n",
       "Name: raised_amount_usd, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Average Values of Investments for Each of these Funding Types\n",
    "df =round(master_frame.groupby('funding_round_type').raised_amount_usd.mean(), 2)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "dd1 = df.sort_values( ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2293e400c18>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dd1.plot.bar()\n",
    "plt.title(\"Sector Analysis\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#master_frame.to_csv('master_frame_funding_type.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Retaining rows with only venture type. As Spark Funds wants to invest between 5 to 15 million USD per investment round\n",
    "master_frame = master_frame[master_frame['funding_round_type'] == 'venture'] \n",
    "\n",
    "#Dropping the column 'funding_round_type' as it is going to be venture type this point forward\n",
    "master_frame = master_frame.drop(['funding_round_type'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3: Country Analysis\n",
    "\n",
    "-  ### Subtask 3.1: Analysing the countries based on investment amount\n",
    "\n",
    "    - Spark Funds wants to see the top nine countries which have received the highest total funding (across ALL sectors for the chosen investment type)\n",
    "\n",
    "    - For the chosen investment type, make a data frame named top9 with the top nine countries (based on the total investment amount each country has received)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>raised_amount_usd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country_code</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>USA</th>\n",
       "      <td>420068.029342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CHN</th>\n",
       "      <td>39338.918773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GBR</th>\n",
       "      <td>20072.813004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IND</th>\n",
       "      <td>14261.508718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CAN</th>\n",
       "      <td>9482.217668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FRA</th>\n",
       "      <td>7226.851352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ISR</th>\n",
       "      <td>6854.350477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DEU</th>\n",
       "      <td>6306.921981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>JPN</th>\n",
       "      <td>3167.647127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              raised_amount_usd\n",
       "country_code                   \n",
       "USA               420068.029342\n",
       "CHN                39338.918773\n",
       "GBR                20072.813004\n",
       "IND                14261.508718\n",
       "CAN                 9482.217668\n",
       "FRA                 7226.851352\n",
       "ISR                 6854.350477\n",
       "DEU                 6306.921981\n",
       "JPN                 3167.647127"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top9 = master_frame.pivot_table(values = 'raised_amount_usd', index = 'country_code', aggfunc = 'sum')\n",
    "top9 = top9.sort_values(by = 'raised_amount_usd', ascending = False)\n",
    "top9 = top9.iloc[:9, ]\n",
    "top9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Country Byse Analysis of Investment (Billion USD)')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY0AAAEjCAYAAADOsV1PAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3Xu8FXW9//HXW0AgFUFFU1A3Jh7lohtFpZ9lJKmoFfpTT5gJeijMtKPHfqVZJ8hbdY7lpWOeNEkwFUkzqTTyQpp3NoggXg6opBsQtqCIx0uCn98f8104bNZee9hs99rK+/l4rMee+c53vvOZtWbPZ83Md80oIjAzMytis2oHYGZmHx5OGmZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZWmJOGfSRIWijpcxvZxhuSdmutmFKbx0h6KbU9qDXb3lRI+pGkszag/trPUdJ1ki5Mw0Ml1efqzZM0tNUDbgOSvihpcjWW7aRRgaQvS6pLG+ESSXdK+lQbLDck7d6K7Q2V9F5ajzckLZL0w9ZqfwNj6ZNi+UU1ll9JRGwZEc+3crOXAGekth9vPLG1P+sNVc3lSxov6TfN1OkJjAJ+mcab3ZaLfo4R0T8i/roRq9BUzOt9gZF0sqQHcuNjJD0jaZWkpZL+JGmrNO06Sf9I01ZJejIlzq1zsU8FBkjau7Xjb46TRhMknQ1cBlwM7ADsAvwCGFHNuAAkdWzBbIvTP9OWwKeAMZKObuXQihgFvAqMlNS5Cstva7sC86odxIfYycAdEfFWrqy9bMstIukzZPuVEyJiK2AvYEqjav+RpvUETgGGAA9K2iJX5yZgbBuEvA4njTJSRj8fOD0ifhcR/xsR70bEHyLi26lOZ0mXSVqcXpeVdoKNv1WksrXf6NI3iSvTt4tVkh6V9Ik07f40yxPpm9SXSofVks6R9DLw6/Tt4wu59jtJekVSbXPrFxEvAA8B/dK8V0r6aaN4/1A6JZCWuyjF+qykYal8M0nnSnpO0nJJUyRt08ziRwHfB94FvpCfkN6jr0uaL+nVFJfStE9Iujct5xVJN0jq3rhxSR+X9KakbXNl+0lqSO/R7pLuk7QytXNzo+WXPqMjJT2V1nmRpP9XbmXSe/B9SX+XtEzSJElbp+3jDaAD2Wf5XDPvS+mb95TUxiplp08Gp2nnSrqlUf3LJV2RhreWdK2yI+JFki6U1CFNK7vOzWxr30nrs0TS0en9+B9JKySd12j9y24DkmrSezpa0otp2d9L04YD5wFfSst+oom35Qjgvqbes8bbcmq70NGTckcEqvz/XHpPvpV7T05prv0K9gceLh15RsSKiJgYEavKrN/bETED+CKwLVkCKfkrcNRGxNEyEeFXoxcwHFgNdKxQ53zgEWB7sm8DDwEXpGknAw80qh/A7mn4OmAFcADQEbgBmFyubhofmuL5CdAZ6Ap8B7g5V2cEMLeJWIcC9bnxvsAi4JA0fgCwGNgsjW8HvEl2hPVPwEvATmlaDfCJNHxWeg96p7h+CdxU4T37NPAO0AP4OTC1zHv0R6A72ZFdAzA8TdsdODQtpydwP3BZbt6FwOfS8B3AablplwI/T8M3Ad8j+8LUBfhUE5/REuDTabgHsG8T6/QvwAJgN2BL4HfA9U19lmXmzy9zPPA2cCRZsvkR8Eiatmv6TLql8Q4pxiFp/Pfp/d+CbJt8DDh1Q9a50bb2A6AT8LX0OdwIbAX0TzHu1tw2kLaVAK4h22b3SZ//Xrn1/U0z/4sNwP5Ft+Um/tcubGLe/DZT6f+59J6cn96TI9Nn0aOJmNe2mys7mbRPIPs/eAv4IXAQ0LlR3bUxNyqfxLr/89ukde3WWvu+Iq+q76Db4ws4EXi5mTrPAUfmxg8HFjbeQHLTG2/Iv8pNOxJ4plzdND4U+AfQJVe2E7CK93citwDfaSLWocB7wGvA66n93wGb5+o8DRyahs8gOyUA2c56GfA5oFOjdp8GhuXGdyQ7giibbIFfAb9Pw59MdbdvtN75HdoU4Nwm2joaeDw3nt8BfAl4MA13AF4GDkjjk4Crgd5l2sx/Ri8Cpzb3DwncA3wjN/5P+feg8WfZzDLHA3fnpvUD3sqNPwCMSsOHAs+l4R3IdsZdc3VPAKZvyDrntpW3gA5pfKtU58BcnZnA0c1tA7yfNHrnpj8GjMytb3NJ411gzw3clluSNCr9P5fek4656ctICbtMzGvbzZWdTG6fQHYE9Ye0Hm8AP8u952tjbtTGj4G7cuOd0rruUuk9bO2XT0+VtxzYTpWvHewE/D03/vdUVtTLueE3yb6lVtIQEW+XRiJiMfAgcGw6TXME2RFLUxZHRPeI6Eb2Tf4tYGJu+kTgK2n4K8D1aTkLyL5NjgeWSZosqbSeuwK3SXpN0mtkO5A1ZDuxdUjqChxfijEiHibbMX+5UdWy74uk7dOyF0l6HfgN2RFRObcD/ZT1oDkUWBkRj6Vp3wEEPJZO//xLE20cS5bM/55O7XyyiXrltoOOlHkPCmq8/l1y2+GNZMkAsvftxjS8K9kOZEnus/gl2bdmKL7OJcsjYk0aLl1LWJqb/hbvb69FtoEN3dbzXiVLXHnNbcst0dz/8/KIWJ0br7Qeq8k+j7xOZAkQgIi4MyK+QHa0MIIsqXy1mRh7kZ2hKCm9L681M1+rctIo72GyQ/BKF9cWk/3DlOySygD+F/hYaYKkj7dCTFGmrLSjP57sHOmiQg1FrCTb4eSvKfwGGCFpH7ILc7/P1b8xIj5Ftr5BdpoMstNWR6R/4NKrSxNxHAN0A34h6WVl12Z6kV3jKOJHadl7p53FV8h2hOXW722yo5QTgZNICTBNezkivhYRO5EdSfyi3PnviJgRESPIdry/Z/0LlSXltoPVrLuTbS2/BYZK6k32fpaSxktkRxrb5T6HbhHRH4qvcwttyDbQWLlturE5wB5NNlB+W26JSv/PG+pFsqOsvD6sm5QAiIj3IuIe4F5gQFMNStqS7Gj/b7nivciOhl5vYZwt4qRRRtoQfwBcmS4CfixdRD1C0n+kajcB35fUU9J2qX6p++ATQH9JtZK6kH1L3xBLyc6RN+f3wL7AmWSnIApJG+BIcr16IqIemEG2g701Um8VSf8k6ZB0UfBtsm91pW+h/w1cJGnXVLenpKZ6l40GJgADgdr0OgiolTSwQNhbkR3GvyapF/DtZupPIvv29kXe/1yQdHza6UL2LTZy61Oqs7mkEyVtHRHvkp0GWadOzk3AvynrSrwlWa+Ymxt9K20VEdFAdvHz18ALEfF0Kl8C/AX4qaRu6eL0J5T10mlunYtua03ZkG2gsaVAjaRK+6E7gM80NbHcttxClf6fN9TNwFmS9lRmMNm1r8kp5hGSRkrqkaYfQLaOjzRuKF2g34/sf/1Vss++5DPAnS2MscWcNJoQET8Dzibr6dNA9o3qDN7/Bn4hUEf2TWguMCuVERH/Q3bR7G5gPtm56A0xHpiYDvn/uUKMbwG3kn2L+V0zbe6Ueqm8QfaNZxuyb+J5E8l26tfnyjqTnUt9hew0w/ZkvV4ALgemAn+RtIpsoz+w8YLTTn4Y2YXrl3OvmcCfyRJKc35IliBXAn9qbn0j4kGyc9+zImJhbtL+wKPpfZgKnBlZD5zGTgIWplNhX+f9U3eNTSB7v+4HXiBLrN8ssD4tdSPZN84bG5WPAjYHniLbudxCdn0BKq/zeApsaxUU2gaa8Nv0d7mkWU3UmQQcmU5vlhTZljdUk//PLXAN2c79D2Tb6yTgexHx5zT9VbIOBvPJvpD8BvjPiMifXv5Oej9XpPlnAv8nIv43V+cE0u9X2pLSBRX7kJL0A2CPiGhqp7YhbR1MtgHXRMR7Gx1clUm6F7gxIn5V7Vis5SRdDCyLiMuqHUt7oay7/UkR0ZJEv3HLdtL48FLWH/5xso3n/ubqN9NWJ7LD5yci4vzWiK+aJO0P3AXsHGX6v5tZy/j01IeUpK+RnTK7sxUSxl5kPTB2JPsV/IeapIlkpwbPcsIwa10+0jAzs8J8pGFmZoU5aZiZWWEtuVtqu7bddttFTU1NtcMwM/tQmTlz5isR0bO5eh+5pFFTU0NdXV21wzAz+1CRtN4v1svx6SkzMyvMScPMzApz0jAzs8I+ctc0zGxd7777LvX19bz99tvNV7aPvC5dutC7d286dWp89/ZinDTMPuLq6+vZaqutqKmpQSp7N3nbREQEy5cvp76+nj59+rSoDZ+eMvuIe/vtt9l2222dMAxJbLvttht11OmkYbYJcMKwko3dFpw0zMyssE3ymkbNuX9qtbYW/vioVmvLrC205vYPrfc/8NWvfpWzzz6bfv36bVQ7W265JW+88UarxPRBuu666zjssMPYaaedmq/cAieffDKf//znOe6441q1XR9pmFmbiQjee6/8871+9atfbXTC+DC57rrrWLy4pY8hrx4nDTP7QC1cuJC99tqLb3zjG+y7776MGTOGwYMH079/f8aNG7e23tChQ6mrq2PNmjWcfPLJDBgwgIEDB3LppZcC8NxzzzF8+HD2228/Pv3pT/PMM88A8MILL/DJT36S/fffn3//93+vGMsbb7zBsGHD2HfffRk4cCC333772hj33HNPvvrVrzJgwABOPPFE7r77bg466CD69u3LY489BsCKFSs4+uij2XvvvRkyZAhz5swBYPz48VxyySVrlzNgwAAWLly4dt2/9rWv0b9/fw477DDeeustbrnlFurq6jjxxBOpra3lrbfeKhtvTU0Nr7zyCgB1dXUMHToUgPvuu4/a2lpqa2sZNGgQq1atIiI444wz6NevH0cddRTLli3b0I+qECcNM/vAPfvss4waNYrHH3+cn/70p9TV1TFnzhzuu+++tTvektmzZ7No0SKefPJJ5s6dyymnnALA2LFj+fnPf87MmTO55JJL+MY3vgHAmWeeyWmnncaMGTP4+Mc/XjGOLl26cNtttzFr1iymT5/Ot771LUrPFFqwYAFnnnkmc+bM4ZlnnuHGG2/kgQce4JJLLuHiiy8GYNy4cQwaNIg5c+Zw8cUXM2rUqGbXff78+Zx++unMmzeP7t27c+utt3LccccxePBgbrjhBmbPnk3Xrl2bbSfvkksu4corr2T27Nn87W9/o2vXrtx22208++yzzJ07l2uuuYaHHnpog9osyknDzD5wu+66K0OGDAFgypQp7LvvvgwaNIh58+bx1FNPrVN3t9124/nnn+eb3/wmf/7zn+nWrRtvvPEGDz30EMcffzy1tbWceuqpLFmyBIAHH3yQE044AYCTTjqpYhwRwXnnncfee+/N5z73ORYtWsTSpUsB6NOnDwMHDmSzzTajf//+DBs2DEkMHDiQhQsXAvDAAw+sXcYhhxzC8uXLWblyZcVl9unTh9raWgD222+/tW1tjIMOOoizzz6bK664gtdee42OHTty//33c8IJJ9ChQwd22mknDjnkkI1eTjmb5IVwM2tbW2yxBZCdSrrkkkuYMWMGPXr04OSTT17vNwM9evTgiSeeYNq0aVx55ZVMmTKFyy67jO7duzN79uyy7RftRnrDDTfQ0NDAzJkz6dSpEzU1NWuX37lz57X1Nttss7Xjm222GatXrwag3JNOJdGxY8d1rtXk1ynfbocOHZo8FVVOvt18m+eeey5HHXUUd9xxB0OGDOHuu+9eG8sHrfCRhqQOkh6X9Mc03kfSo5LmS7pZ0uapvHMaX5Cm1+Ta+G4qf1bS4bny4alsgaRzc+Vll2FmH06vv/46W2yxBVtvvTVLly7lzjvvXK/OK6+8wnvvvcexxx7LBRdcwKxZs+jWrRt9+vTht7/9LZDtvJ944gkg+9Y9efJkIEsKlaxcuZLtt9+eTp06MX36dP7+90J3A1/r4IMPXruMv/71r2y33XZ069aNmpoaZs2aBcCsWbN44YUXmm1rq622YtWqyo+wr6mpYebMmQDceuuta8ufe+45Bg4cyDnnnMPgwYN55plnOPjgg5k8eTJr1qxhyZIlTJ8+fYPWragNOdI4E3ga6JbGfwJcGhGTJf03MAa4Kv19NSJ2lzQy1fuSpH7ASKA/sBNwt6Q9UltXAocC9cAMSVMj4qkKyzCzFqpmN/F99tmHQYMG0b9/f3bbbTcOOuig9eosWrSIU045Ze037B/96EdAlhBOO+00LrzwQt59911GjhzJPvvsw+WXX86Xv/xlLr/8co499tiKyz/xxBP5whe+wODBg6mtrWXPPffcoPjHjx/PKaecwt57783HPvYxJk6cCMCxxx7LpEmTqK2tZf/992ePPfZopqWsS+zXv/51unbtysMPP1z2usa4ceMYM2YMF198MQceeODa8ssuu4zp06fToUMH+vXrxxFHHMHmm2/Ovffey8CBA9ljjz34zGc+s0HrVpTKHW6tV0nqDUwELgLOBr4ANAAfj4jVkj4JjI+IwyVNS8MPS+oIvAz0BM4FiIgfpTanAePTIsZHxOGp/Lup7MdNLaNSrIMHD47mHsLk32nYpuTpp59mr732qnYY1o6U2yYkzYyIwc3NW/T01GXAd4DSSbttgdciYnUarwd6peFewEsAafrKVH9teaN5miqvtAwzM6uCZk9PSfo8sCwiZkoaWiouUzWamdZUebnEVal+uRjHAmMBdtlll3JVzGwTMnfu3PV6UnXu3JlHH320ShFVdswxx6x3HeQnP/kJhx9e8cRKVRS5pnEQ8EVJRwJdyK5pXAZ0l9QxHQn0Bko/bawHdgbq0+mprYEVufKS/Dzlyl+psIx1RMTVwNWQnZ4qsE5mm5SI2KRuWjhw4MAme1q1R7fddlubLavIJYlKmj09FRHfjYjeEVFDdiH73og4EZgOlG5qMhq4PQ1PTeOk6fdGFuVUYGTqXdUH6As8BswA+qaeUpunZUxN8zS1DDMrqEuXLixfvnyjdxb24Vd6nkaXLl1a3MbG/E7jHGCypAuBx4FrU/m1wPWSFpAdYYxMwc6TNAV4ClgNnB4RawAknQFMAzoAEyJiXjPLMLOCevfuTX19PQ0NDdUOxdqB0pP7WqpQ76kPE/eeMjPbcK3de8rMzMxJw8zMinPSMDOzwpw0zMysMCcNMzMrzEnDzMwKc9IwM7PCnDTMzKwwJw0zMyvMScPMzApz0jAzs8KcNMzMrDAnDTMzK8xJw8zMCnPSMDOzwpw0zMyssGaThqQukh6T9ISkeZJ+mMqvk/SCpNnpVZvKJekKSQskzZG0b66t0ZLmp9foXPl+kuamea5QepixpG0k3ZXq3yWpR+u/BWZmVlSRI413gEMiYh+gFhguaUia9u2IqE2v0lPcjyB7/ndfYCxwFWQJABgHHAgcAIzLJYGrUt3SfMNT+bnAPRHRF7gnjZuZWZU0mzQi80Ya7ZRelZ4ROwKYlOZ7BOguaUfgcOCuiFgREa8Cd5EloB2BbhHxcGTPnp0EHJ1ra2IanpgrNzOzKih0TUNSB0mzgWVkO/5H06SL0imoSyV1TmW9gJdys9enskrl9WXKAXaIiCUA6e/2TcQ3VlKdpLqGhoYiq2RmZi1QKGlExJqIqAV6AwdIGgB8F9gT2B/YBjgnVVe5JlpQXlhEXB0RgyNicM+ePTdkVjMz2wAb1HsqIl4D/goMj4gl6RTUO8Cvya5TQHaksHNutt7A4mbKe5cpB1iaTl+R/i7bkHjNzKx1Fek91VNS9zTcFfgc8ExuZy6yaw1PplmmAqNSL6ohwMp0amkacJikHukC+GHAtDRtlaQhqa1RwO25tkq9rEbnys3MrAo6FqizIzBRUgeyJDMlIv4o6V5JPclOL80Gvp7q3wEcCSwA3gROAYiIFZIuAGakeudHxIo0fBpwHdAVuDO9AH4MTJE0BngROL6lK2pmZhuv2aQREXOAQWXKD2mifgCnNzFtAjChTHkdMKBM+XJgWHMxmplZ2/Avws3MrDAnDTMzK8xJw8zMCnPSMDOzwpw0zMysMCcNMzMrzEnDzMwKc9IwM7PCnDTMzKwwJw0zMyvMScPMzApz0jAzs8KcNMzMrDAnDTMzK8xJw8zMCnPSMDOzwoo87rWLpMckPSFpnqQfpvI+kh6VNF/SzZI2T+Wd0/iCNL0m19Z3U/mzkg7PlQ9PZQsknZsrL7sMMzOrjiJHGu8Ah0TEPkAtMDw9+/snwKUR0Rd4FRiT6o8BXo2I3YFLUz0k9QNGAv2B4cAvJHVIj5G9EjgC6AeckOpSYRlmZlYFzSaNyLyRRjulVwCHALek8onA0Wl4RBonTR8mSal8ckS8ExEvkD1D/ID0WhARz0fEP4DJwIg0T1PLMDOzKih0TSMdEcwGlgF3Ac8Br0XE6lSlHuiVhnsBLwGk6SuBbfPljeZpqnzbCstoHN9YSXWS6hoaGoqskpmZtUChpBERayKiFuhNdmSwV7lq6a+amNZa5eXiuzoiBkfE4J49e5arYmZmrWCDek9FxGvAX4EhQHdJHdOk3sDiNFwP7AyQpm8NrMiXN5qnqfJXKizDzMyqoEjvqZ6SuqfhrsDngKeB6cBxqdpo4PY0PDWNk6bfGxGRykem3lV9gL7AY8AMoG/qKbU52cXyqWmeppZhZmZV0LH5KuwITEy9nDYDpkTEHyU9BUyWdCHwOHBtqn8tcL2kBWRHGCMBImKepCnAU8Bq4PSIWAMg6QxgGtABmBAR81Jb5zSxDDMzq4Jmk0ZEzAEGlSl/nuz6RuPyt4Hjm2jrIuCiMuV3AHcUXYaZmVWHfxFuZmaFOWmYmVlhThpmZlaYk4aZmRXmpGFmZoU5aZiZWWFOGmZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZWmJOGmZkV5qRhZmaFOWmYmVlhThpmZlZYkSf37SxpuqSnJc2TdGYqHy9pkaTZ6XVkbp7vSlog6VlJh+fKh6eyBZLOzZX3kfSopPmSbk5P8CM95e/mVP9RSTWtufJmZrZhihxprAa+FRF7kT0b/HRJ/dK0SyOiNr3uAEjTRgL9geHALyR1SE/+uxI4AugHnJBr5yeprb7Aq8CYVD4GeDUidgcuTfXMzKxKmk0aEbEkImal4VVkzwfvVWGWEcDkiHgnIl4AFpA9fe8AYEFEPB8R/wAmAyMkCTgEuCXNPxE4OtfWxDR8CzAs1TczsyrYoGsa6fTQIODRVHSGpDmSJkjqkcp6AS/lZqtPZU2Vbwu8FhGrG5Wv01aavjLVNzOzKiicNCRtCdwKnBURrwNXAZ8AaoElwE9LVcvMHi0or9RW49jGSqqTVNfQ0FBxPczMrOUKJQ1JncgSxg0R8TuAiFgaEWsi4j3gGrLTT5AdKeycm703sLhC+StAd0kdG5Wv01aavjWwonF8EXF1RAyOiME9e/YsskpmZtYCRXpPCbgWeDoifpYr3zFX7RjgyTQ8FRiZej71AfoCjwEzgL6pp9TmZBfLp0ZEANOB49L8o4Hbc22NTsPHAfem+mZmVgUdm6/CQcBJwFxJs1PZeWS9n2rJThctBE4FiIh5kqYAT5H1vDo9ItYASDoDmAZ0ACZExLzU3jnAZEkXAo+TJSnS3+slLSA7whi5EetqZmYbqdmkEREPUP7awh0V5rkIuKhM+R3l5ouI53n/9Fa+/G3g+OZiNDOztuFfhJuZWWFOGmZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZWmJOGmZkV5qRhZmaFOWmYmVlhThpmZlaYk4aZmRXmpGFmZoU5aZiZWWFOGmZmVpiThpmZFeakYWZmhRV53OvOkqZLelrSPElnpvJtJN0laX762yOVS9IVkhZImiNp31xbo1P9+ZJG58r3kzQ3zXNFesRsk8swM7PqKHKksRr4VkTsBQwBTpfUDzgXuCci+gL3pHGAI8ieC94XGAtcBVkCAMYBB5I9pW9cLglcleqW5hueyptahpmZVUGzSSMilkTErDS8Cnga6AWMACamahOBo9PwCGBSZB4BukvaETgcuCsiVkTEq8BdwPA0rVtEPBwRAUxq1Fa5ZZiZWRVs0DUNSTXAIOBRYIeIWAJZYgG2T9V6AS/lZqtPZZXK68uUU2EZjeMaK6lOUl1DQ8OGrJKZmW2AwklD0pbArcBZEfF6paplyqIF5YVFxNURMTgiBvfs2XNDZjUzsw1QKGlI6kSWMG6IiN+l4qXp1BLp77JUXg/snJu9N7C4mfLeZcorLcPMzKqgSO8pAdcCT0fEz3KTpgKlHlCjgdtz5aNSL6ohwMp0amkacJikHukC+GHAtDRtlaQhaVmjGrVVbhlmZlYFHQvUOQg4CZgraXYqOw/4MTBF0hjgReD4NO0O4EhgAfAmcApARKyQdAEwI9U7PyJWpOHTgOuArsCd6UWFZZiZWRU0mzQi4gHKX3cAGFamfgCnN9HWBGBCmfI6YECZ8uXllmFmZtXhX4SbmVlhThpmZlaYk4aZmRXmpGFmZoU5aZiZWWFOGmZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZWmJOGmZkV5qRhZmaFOWmYmVlhThpmZlaYk4aZmRXmpGFmZoUVedzrBEnLJD2ZKxsvaZGk2el1ZG7adyUtkPSspMNz5cNT2QJJ5+bK+0h6VNJ8STdL2jyVd07jC9L0mtZaaTMza5kiRxrXAcPLlF8aEbXpdQeApH7ASKB/mucXkjpI6gBcCRwB9ANOSHUBfpLa6gu8CoxJ5WOAVyNid+DSVM/MzKqo2aQREfcDK5qrl4wAJkfEOxHxAtlzwg9IrwUR8XxE/AOYDIyQJOAQ4JY0/0Tg6FxbE9PwLcCwVN/MzKpkY65pnCFpTjp91SOV9QJeytWpT2VNlW8LvBYRqxuVr9NWmr4y1V+PpLGS6iTVNTQ0bMQqmZlZJS1NGlcBnwBqgSXAT1N5uSOBaEF5pbbWL4y4OiIGR8Tgnj17VorbzMw2QouSRkQsjYg1EfEecA3Z6SfIjhR2zlXtDSyuUP4K0F1Sx0bl67SVpm9N8dNkZmb2AWhR0pC0Y270GKDUs2oqMDL1fOoD9AUeA2YAfVNPqc3JLpZPjYgApgPHpflHA7fn2hqdho8D7k31zcysSjo2V0HSTcBQYDtJ9cA4YKikWrLTRQuBUwEiYp6kKcBTwGrg9IhYk9o5A5gGdAAmRMS8tIhzgMmSLgTweMmMAAARn0lEQVQeB65N5dcC10taQHaEMXKj19bMzDZKs0kjIk4oU3xtmbJS/YuAi8qU3wHcUab8ed4/vZUvfxs4vrn4zMys7fgX4WZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZWmJOGmZkV5qRhZmaFOWmYmVlhThpmZlaYk4aZmRXmpGFmZoU5aZiZWWFOGmZmVpiThpmZFeakYWZmhTWbNCRNkLRM0pO5sm0k3SVpfvrbI5VL0hWSFkiaI2nf3DyjU/35kkbnyveTNDfNc4UkVVqGmZlVT5EjjeuA4Y3KzgXuiYi+wD1pHOAIske89gXGAldBlgDInvh3INkDl8blksBVqW5pvuHNLMPMzKqk2aQREfeTPW41bwQwMQ1PBI7OlU+KzCNA9/Q88cOBuyJiRUS8CtwFDE/TukXEw+n535MatVVuGWZmViUtvaaxQ0QsAUh/t0/lvYCXcvXqU1ml8voy5ZWWYWZmVdLaF8JVpixaUL5hC5XGSqqTVNfQ0LChs5uZWUEtTRpL06kl0t9lqbwe2DlXrzewuJny3mXKKy1jPRFxdUQMjojBPXv2bOEqmZlZc1qaNKYCpR5Qo4Hbc+WjUi+qIcDKdGppGnCYpB7pAvhhwLQ0bZWkIanX1KhGbZVbhpmZVUnH5ipIugkYCmwnqZ6sF9SPgSmSxgAvAsen6ncARwILgDeBUwAiYoWkC4AZqd75EVG6uH4aWQ+trsCd6UWFZZiZWZU0mzQi4oQmJg0rUzeA05toZwIwoUx5HTCgTPnycsswM7Pq8S/CzcysMCcNMzMrzEnDzMwKc9IwM7PCnDTMzKwwJw0zMyvMScPMzApz0jAzs8KcNMzMrDAnDTMzK8xJw8zMCnPSMDOzwpw0zMysMCcNMzMrzEnDzMwKc9IwM7PCNippSFooaa6k2ZLqUtk2ku6SND/97ZHKJekKSQskzZG0b66d0an+fEmjc+X7pfYXpHm1MfGamdnGaY0jjc9GRG1EDE7j5wL3RERf4J40DnAE0De9xgJXQZZkyB4heyBwADCulGhSnbG5+Ya3QrxmZtZCH8TpqRHAxDQ8ETg6Vz4pMo8A3SXtCBwO3BURKyLiVeAuYHia1i0iHk6PkZ2Ua8vMzKpgY5NGAH+RNFPS2FS2Q0QsAUh/t0/lvYCXcvPWp7JK5fVlytcjaaykOkl1DQ0NG7lKZmbWlI4bOf9BEbFY0vbAXZKeqVC33PWIaEH5+oURVwNXAwwePLhsHTMz23gbdaQREYvT32XAbWTXJJamU0ukv8tS9Xpg59zsvYHFzZT3LlNuZmZV0uKkIWkLSVuVhoHDgCeBqUCpB9Ro4PY0PBUYlXpRDQFWptNX04DDJPVIF8APA6alaaskDUm9pkbl2jIzsyrYmNNTOwC3pV6wHYEbI+LPkmYAUySNAV4Ejk/17wCOBBYAbwKnAETECkkXADNSvfMjYkUaPg24DugK3JleZmZWJS1OGhHxPLBPmfLlwLAy5QGc3kRbE4AJZcrrgAEtjdHMzFrXxl4It1ZSc+6fWq2thT8+qtXaMjPL821EzMysMCcNMzMrzEnDzMwKc9IwM7PCnDTMzKwwJw0zMyvMScPMzApz0jAzs8L84z6rqLV+dOgfHJp9NPhIw8zMCnPSMDOzwnx6yj50fMrMrHp8pGFmZoX5SMOsFfguxbapcNIw+4hyIrMPQrtPGpKGA5cDHYBfRcSPqxySmbVQe01kvk5WXLtOGpI6AFcChwL1wAxJUyPiqepGZmb2wWqviay9Xwg/AFgQEc9HxD+AycCIKsdkZrbJUvbo7vZJ0nHA8Ij4aho/CTgwIs5oVG8sMDaN/hPwbCuFsB3wSiu11VocUzGOqbj2GJdjKqY1Y9o1Ino2V6ldn54CVKZsvSwXEVcDV7f6wqW6iBjc2u1uDMdUjGMqrj3G5ZiKqUZM7f30VD2wc268N7C4SrGYmW3y2nvSmAH0ldRH0ubASGBqlWMyM9tktevTUxGxWtIZwDSyLrcTImJeG4bQ6qe8WoFjKsYxFdce43JMxbR5TO36QriZmbUv7f30lJmZtSNOGmZmVpiThpmZFdauL4S3B5L2j4gZ1Y6jvZO0RUT8b7XjsJbztt5+SRpVaXpETGqzWHwhfH2S+pF17z0BWNneftBTTZJ6ATsCcyLiH5K2B84CTo6InaoYV0fgCGDPVPQ08OeIWF2leA6uND0i7m+rWCppz9u6pO7A6RFxURWWfXajoiD75fUDEfFCFeL5ebli4AtAr4hoswMAH2kkknYl+8c5AVgN7AoMjoiFVYrnBdb99bty4xERn6hCTGcB3wMWAJ0lXQ78DJgE7NfW8eTi2gmYDiwBHid7rz4P/FTSZyOiGj8I/XaZsgD2IfuRaoe2Ded97XBb3xn4d2An4PfAjcAFwEnATdWICdiqTFkN8D1J4yNiclsGExHfLA1LEnAicA7wCNCmSdVHGoCkh4CtyW6IODki5kt6ISL6VDGmbRsVbQb8M/D/gFkRcWwVYnoK+FRErJC0C1nyODgiHmnrWBrFdR0wOyIua1T+r8B+ETG6KoGtG8unyBJuD+CiiPhDleJoj9v6dOA+4GFgODAMmAf8W0S8XK24ypG0DXB3ROxbhWV3BE4GvgU8CvwoIlrrPnuF+Ugj00D27W8HoCcwnzL3uGpLEbEcQNJmZN+4vg3MBo6q4q3h346IFSm+FyX9T7UTRjIkIk5uXBgRV0hq83+qPEnDyL5FB3BxRNxVzXhoh9s6sE1EjE/D0yQtBfaPiHeqGFNZ6QtTuXvifaAknQ6cCdxDdhPXv7d1DCVOGkBEjJC0NXAs8ENJuwPdJR0QEY9VIyZJnYB/Af4NeAAYERHPVSOWnN6SrsiNb58fj4h/rUJMAG9VmPZmm0WRI+kosiOLlcD3IuLBasTRWHvc1gEk9eD9G5S+DHxM0haQ7airFVdjkg4BXq3Con8OLAM+Bfwhl7dEdrp677YKxKenypC0A/AlsguEO0fEzs3M8kHEUE92vvky4MXG0yPid1WIqeJpnoiY2Fax5El6nuy03XqTgP+o0vWf98huuPkE5e/M/MW2jqmc1JHhS2TXN6q1rS8E3qOJu1pHxG5tGxFImsv6n9s2ZDdMHR0RT7dxPLtWmt6WRx5OGk1I33xeA3apxqFgOk/f1IcTEfEvbRhOuybp15WmR8QpbRVLiaTPVJoeEfe1VSxFSaqp1sXw9qbMTjqA5dXsVi7paGB3YG5ETKtaHE4aIOkHwJSIeEZSZ+DPZL1cVgNfjoi7qxpgOyFpO+B0ssPzCcB/Ap8GngO+FRELqhjeh0LqKTQyIv6zijF8EugF3B8RyyTtDZwLfLpKRxq7Aq9FxMo0/lngaGAhcGV6amdbx3RIRNybhvvku9lK+r9tfaQv6RdAf+Ahso4Cf4iIC9oyhrWxOGmApHnAgIiI9BTAE4DPAXsAEyPigCrE1Lif+Doi4mdtFUuJpL8AdWTdEYcBvwb+QJY4ToyIoW0dU4qr0g+fIiKub7NgykjJ9niy7aoXcFtElDud1hax/CdZd+TZZN9a/wh8A7gY+GVEvF2FmB4FjomIxZJqgbuBHwF7A++WntzZxjHNKvWQyg+XG2+jeJ4E9omINZI+BvwtIqrSzd0XwjP/iPez5+FkXRHXAE+nC9LVkO8nfirwyyrFkbdDRJyXeo/8Pfdt+ZnUu6Na9i9TtvaHT0CbJw1JWwHHAF8m+/JxG7BbRPRu61gaOQoYFBFvp1Owi4G9I2J+FWPqmvstzVfIHoHw09RzcHaVYlITw+XG28I/0j6JiHizGj24Spw0Mu9IGgAsBT7LuhdVu1YjoIj4YWlY0tH58SoqbbQhqfFzid+rQjxA+/rhU84y4DHg+2S/Ig5Jx1Qplry3SkcTEfGqpGernDBg3Z3wIcB3ASLivSruG6OJ4XLjbWEvSXN4/736RG68TXtPOWlkzgRuIeu3/rPS+UtJR5L9wrja2ss5xN0kTSXbUEvDpPGq/TgMyv7w6bhq/PAp5zyy3ndXATdKurmKseR9Ive5AdTkx6vUq+teSVPIftHfAyhdS9gRaPPrGUl729b3pJ3sB3xNg7XXD0oZPKjyfWYaq8Y51CbiKNcjqLQBqVo9ghr98OnH1fzhU2OSdiO7ljES6Av8APh9RPxPleJpd7260tHhl8juaTYlIhal8kHA9tXoKdTe3idJq2g6abxD1hnlexFxzwcei5MGSBpXpngbsusbbX6fGVivn/juZLfsWKstD0dzMY0AekfElWn8MbKjswDOiYjftnVMKY73yE4HNVDmfl1Veq92J7sG9GCubG+y3918JiKqcu8pSbtExHq/+7GmSeoJEBEN1Y6lHEkdgAHADREx4ANfnpNG06p8n5m+ZLd6eKnRpF2BxdXo3irpQbLuoi+l8dlkvai2AH4dEcPaOqYUR7v54VOJpD8C50XEnEbl+wPjIuLzbR1TWn6+V9CtUYV7mJWJqalv0aWk362NQyod/fwA+GaKYzOyLvg/j4jz2zqeIiSdGhEfeIcZX9OoIKp0n5nkUrKdzjo7vPSt51KynkFtbfNSwkgeiOweWctLt3yohvZ0OiqnpnHCAIiIGc0luQ9Yfntu819alxMR5e4oW21nkd2yY//cNc7dgKsk/VtEXFrV6Mpoi4QBThoVVfE+M9D0TqdOUk3bhwNkFynXiogzcqM92ziWtdrjN1WgS4VpVemRl1TqFWTvGwUcGhFrewlGxPOSvgL8heyL2ybJSYNm7zNT8YlZH6D2uNN5VNLXIuKafKGkU8m6l1ZFO/2mOqOJ92oMMLNKMQHsI+l1soTaNQ1DdRNse9QpnzBKIqKhir/dahd8TYN2e5+Zm4B7m9jpHBYRX6pCTNuTPSTnHWBWKt4P6AwcHRFL2zqm9krZTS9vI+syWkoSg4HNyX793K6eE2HrqtRjsb30ZqwWJ412qj3vdNJpu/5pdF7pHj22vnQfpVKPFr9XHxKS1gDlvjQK6BIRm+zRhpNGO+edjpm1J04aZmZW2GbVDsDMzD48nDTMzKwwJw2zViDprPScg2rHsTA9v8PsA+GkYdY6zgLKJo10byCzjwQnDdtkSBolaY6kJyRdL2lXSfeksnsk7ZLqXSfpuNx8b6S/QyX9VdItkp6RdIMy/wrsBEyXNL00j6TzlT2V7vuSbsu1d6ikJh8XKmm4pFkpzntS2TaSfp9ifSTd/BBJ20r6i6THJf2S3G1CJH1F0mOSZkv6pZOXtQYnDdskSOoPfA84JCL2IbuV+n8Bk9JdcG8ArijQ1CCyo4p+ZPduOigiriC7e8BnI+Kzqd4WwJMRcSBwPtlDdEq3WjmF7FG55eLsCVwDHJviPD5N+iHweIr1PGBSKh9Hdg+wQcBUoJT49iK73fhBEVFL9gCtEwusn1lFThq2qTgEuKV0a4iIWAF8ErgxTb+e7AZ1zXksIuoj4j2yR5HWNFFvDXBrWlak9r8iqXta7p1NzDcEuL90k7wUJym261PZvcC2krYGDgZ+k8r/xPv3ShtG9mv9Gbm7EbeLGxTah5vvPWWbCtH8DfpK01eTvlCluxxvnqvzTm54DU3/D71deqZz8mvgD8DbwG8jYvUGxlnubsvR6G/j+hMj4rtNLMesRXykYZuKe4B/lrQtrH1WykNkT9SD7NTNA2l4Idm3dIARQJFbRqwCmrxxYkQsJjuF9X3gugrtPAx8RlKfXJwA96cYkTQUeCUiXm9UfgTv34n4HuC4dL+w0jWRat6S3T4ifKRhm4SImCfpIuC+dF+hx4F/BSZI+jbZU/9OSdWvAW5PTya8h/L3IGrsauBOSUty1zUauwHoGRFPVYizQdJY4HeSNiN7IuGhwHjg15LmAG8Co9MsPwRukjQLuA94MbXzlKTvA39J7bwLnA60x2eP2IeIbyNi1kYk/RfZxexrqx2LWUs5aZi1AUkzyY5YDo2Id5qrb9ZeOWmYVUn6DUfnRsUnRcTcasRjVoSThpmZFebeU2ZmVpiThpmZFeakYWZmhTlpmJlZYU4aZmZW2P8HnuxK+TqKD0QAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "top9.plot.bar()\n",
    "plt.title(\"Country Byse Analysis of Investment (Billion USD)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "top9.to_csv('top9.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Rows with only USA, GBR and IND country_codes. As SparksFunds wants to invest in only top three English speaking countries.\n",
    "master_frame = master_frame[(master_frame['country_code'] == 'USA')\n",
    "                            | (master_frame['country_code'] == 'GBR')\n",
    "                            | (master_frame['country_code'] == 'IND')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 4: Sector Analysis 1\n",
    "\n",
    "-  ### Subtask 4.1: Extract the primary sector of each category\n",
    "\n",
    "Extract the primary sector value into *category_list* column. According to the  business rule the first string before the vertical bar will be considered the primary sector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting the primary vector value\n",
    "master_frame['category_list'] = master_frame['category_list'].apply(lambda x: x.split('|')[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_list</th>\n",
       "      <th>Automotive &amp; Sports</th>\n",
       "      <th>Blanks</th>\n",
       "      <th>Cleantech / Semiconductors</th>\n",
       "      <th>Entertainment</th>\n",
       "      <th>Health</th>\n",
       "      <th>Manufacturing</th>\n",
       "      <th>News, Search and Messaging</th>\n",
       "      <th>Others</th>\n",
       "      <th>Social, Finance, Analytics, Advertising</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3D</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3D Printing</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3D Technology</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Accounting</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   category_list  Automotive & Sports  Blanks  Cleantech / Semiconductors  \\\n",
       "0            NaN                    0       1                           0   \n",
       "1             3D                    0       0                           0   \n",
       "2    3D Printing                    0       0                           0   \n",
       "3  3D Technology                    0       0                           0   \n",
       "4     Accounting                    0       0                           0   \n",
       "\n",
       "   Entertainment  Health  Manufacturing  News, Search and Messaging  Others  \\\n",
       "0              0       0              0                           0       0   \n",
       "1              0       0              1                           0       0   \n",
       "2              0       0              1                           0       0   \n",
       "3              0       0              1                           0       0   \n",
       "4              0       0              0                           0       0   \n",
       "\n",
       "   Social, Finance, Analytics, Advertising  \n",
       "0                                        0  \n",
       "1                                        0  \n",
       "2                                        0  \n",
       "3                                        0  \n",
       "4                                        1  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading mapping.csv file \n",
    "mapping = pd.read_csv('../Investment_Assignment/data/mapping.csv')\n",
    "mapping.category_list = mapping.category_list.replace({'0':'na', '2.na' :'2.0'}, regex=True)\n",
    "mapping.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>category_list</th>\n",
       "      <th>main_sector</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3D</td>\n",
       "      <td>Manufacturing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3D Printing</td>\n",
       "      <td>Manufacturing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3D Technology</td>\n",
       "      <td>Manufacturing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Advanced Materials</td>\n",
       "      <td>Manufacturing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Agriculture</td>\n",
       "      <td>Manufacturing</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         category_list    main_sector\n",
       "1                   3D  Manufacturing\n",
       "2          3D Printing  Manufacturing\n",
       "3        3D Technology  Manufacturing\n",
       "7   Advanced Materials  Manufacturing\n",
       "15         Agriculture  Manufacturing"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reshaping the mapping dataframe to merge with the master_frame dataframe. Using melt() function to unpivot the table.\n",
    "mapping = pd.melt(mapping, id_vars =['category_list'], value_vars =['Manufacturing','Automotive & Sports',\n",
    "                                                              'Cleantech / Semiconductors','Entertainment',\n",
    "                                                             'Health','News, Search and Messaging','Others',\n",
    "                                                             'Social, Finance, Analytics, Advertising']) \n",
    "mapping = mapping[~(mapping.value == 0)]\n",
    "mapping = mapping.drop('value', axis = 1)\n",
    "mapping = mapping.rename(columns = {\"variable\":\"main_sector\"})\n",
    "mapping.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "      <th>main_sector</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>10.0</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "      <td>Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/0xdata</td>\n",
       "      <td>20.0</td>\n",
       "      <td>H2O.ai</td>\n",
       "      <td>Analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/0xdata</td>\n",
       "      <td>1.7</td>\n",
       "      <td>H2O.ai</td>\n",
       "      <td>Analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/0xdata</td>\n",
       "      <td>8.9</td>\n",
       "      <td>H2O.ai</td>\n",
       "      <td>Analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/1-mainstream</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1 Mainstream</td>\n",
       "      <td>Apps</td>\n",
       "      <td>USA</td>\n",
       "      <td>News, Search and Messaging</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            company_permalink  raised_amount_usd          name category_list  \\\n",
       "0         /organization/-fame               10.0         #fame         Media   \n",
       "1        /organization/0xdata               20.0        H2O.ai     Analytics   \n",
       "2        /organization/0xdata                1.7        H2O.ai     Analytics   \n",
       "3        /organization/0xdata                8.9        H2O.ai     Analytics   \n",
       "4  /organization/1-mainstream                5.0  1 Mainstream          Apps   \n",
       "\n",
       "  country_code                              main_sector  \n",
       "0          IND                            Entertainment  \n",
       "1          USA  Social, Finance, Analytics, Advertising  \n",
       "2          USA  Social, Finance, Analytics, Advertising  \n",
       "3          USA  Social, Finance, Analytics, Advertising  \n",
       "4          USA               News, Search and Messaging  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_frame = master_frame.merge(mapping, how = 'left', on ='category_list')\n",
    "master_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Nanotechnology' 'Natural Gas Uses' 'Natural Language Processing'\n",
      " 'Enterprise 2.0' 'Adaptive Equipment' 'Racing' 'Specialty Retail'\n",
      " 'Biotechnology and Semiconductor' 'Rapidly Expanding' 'Navigation'\n",
      " 'Product Search' 'GreenTech' 'Retirement']\n"
     ]
    }
   ],
   "source": [
    "#List of primary sectors which have no main sectors in the master_frame\n",
    "print(master_frame[master_frame.main_sector.isnull()].category_list.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "165"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Number of rows with NaN masin_sector value\n",
    "len(master_frame[master_frame.main_sector.isnull()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38638"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Retaining the rows which have main_sector values\n",
    "master_frame = master_frame[~(master_frame.main_sector.isnull())]\n",
    "len(master_frame.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 5: Sector Analysis 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "      <th>main_sector</th>\n",
       "      <th>(raised_amount_usd, Total_amount)</th>\n",
       "      <th>(raised_amount_usd, Total_count)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/0xdata</td>\n",
       "      <td>8.900000</td>\n",
       "      <td>H2O.ai</td>\n",
       "      <td>Analytics</td>\n",
       "      <td>USA</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "      <td>23807.376964</td>\n",
       "      <td>2714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/1-mainstream</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1 Mainstream</td>\n",
       "      <td>Apps</td>\n",
       "      <td>USA</td>\n",
       "      <td>News, Search and Messaging</td>\n",
       "      <td>13959.567428</td>\n",
       "      <td>1582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/128-technology</td>\n",
       "      <td>11.999347</td>\n",
       "      <td>128 Technology</td>\n",
       "      <td>Service Providers</td>\n",
       "      <td>USA</td>\n",
       "      <td>Others</td>\n",
       "      <td>26321.007002</td>\n",
       "      <td>2950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/1366-technologies</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1366 Technologies</td>\n",
       "      <td>Manufacturing</td>\n",
       "      <td>USA</td>\n",
       "      <td>Manufacturing</td>\n",
       "      <td>7258.553378</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/1366-technologies</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1366 Technologies</td>\n",
       "      <td>Manufacturing</td>\n",
       "      <td>USA</td>\n",
       "      <td>Manufacturing</td>\n",
       "      <td>7258.553378</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 company_permalink  raised_amount_usd               name  \\\n",
       "0             /organization/0xdata           8.900000             H2O.ai   \n",
       "1       /organization/1-mainstream           5.000000       1 Mainstream   \n",
       "2     /organization/128-technology          11.999347     128 Technology   \n",
       "3  /organization/1366-technologies          15.000000  1366 Technologies   \n",
       "4  /organization/1366-technologies           5.000000  1366 Technologies   \n",
       "\n",
       "       category_list country_code                              main_sector  \\\n",
       "0          Analytics          USA  Social, Finance, Analytics, Advertising   \n",
       "1               Apps          USA               News, Search and Messaging   \n",
       "2  Service Providers          USA                                   Others   \n",
       "3      Manufacturing          USA                            Manufacturing   \n",
       "4      Manufacturing          USA                            Manufacturing   \n",
       "\n",
       "   (raised_amount_usd, Total_amount)  (raised_amount_usd, Total_count)  \n",
       "0                       23807.376964                              2714  \n",
       "1                       13959.567428                              1582  \n",
       "2                       26321.007002                              2950  \n",
       "3                        7258.553378                               799  \n",
       "4                        7258.553378                               799  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C1 = master_frame[(master_frame['country_code'] == 'USA') & \n",
    "             (master_frame['raised_amount_usd'] >= 5) & \n",
    "             (master_frame['raised_amount_usd'] <= 15)]\n",
    "C1_gr = C1[['raised_amount_usd','main_sector']].groupby('main_sector').agg(['sum', 'count']).rename(\n",
    "    columns={'sum':'Total_amount','count' : 'Total_count'})\n",
    "C1 = C1.merge(C1_gr, how='left', on ='main_sector')\n",
    "C1.to_csv('C1.csv')\n",
    "C1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "      <th>main_sector</th>\n",
       "      <th>(raised_amount_usd, Total_amount)</th>\n",
       "      <th>(raised_amount_usd, Total_count)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/365scores</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>365Scores</td>\n",
       "      <td>Android</td>\n",
       "      <td>GBR</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "      <td>1089.404014</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/7digital</td>\n",
       "      <td>8.468328</td>\n",
       "      <td>7digital</td>\n",
       "      <td>Content Creators</td>\n",
       "      <td>GBR</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>482.784687</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/7digital</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>7digital</td>\n",
       "      <td>Content Creators</td>\n",
       "      <td>GBR</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>482.784687</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/90min</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>90min</td>\n",
       "      <td>Media</td>\n",
       "      <td>GBR</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>482.784687</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/90min</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>90min</td>\n",
       "      <td>Media</td>\n",
       "      <td>GBR</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>482.784687</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         company_permalink  raised_amount_usd       name     category_list  \\\n",
       "0  /organization/365scores           5.500000  365Scores           Android   \n",
       "1   /organization/7digital           8.468328   7digital  Content Creators   \n",
       "2   /organization/7digital          10.000000   7digital  Content Creators   \n",
       "3      /organization/90min          15.000000      90min             Media   \n",
       "4      /organization/90min           5.800000      90min             Media   \n",
       "\n",
       "  country_code                              main_sector  \\\n",
       "0          GBR  Social, Finance, Analytics, Advertising   \n",
       "1          GBR                            Entertainment   \n",
       "2          GBR                            Entertainment   \n",
       "3          GBR                            Entertainment   \n",
       "4          GBR                            Entertainment   \n",
       "\n",
       "   (raised_amount_usd, Total_amount)  (raised_amount_usd, Total_count)  \n",
       "0                        1089.404014                               133  \n",
       "1                         482.784687                                56  \n",
       "2                         482.784687                                56  \n",
       "3                         482.784687                                56  \n",
       "4                         482.784687                                56  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C2 = master_frame[(master_frame['country_code'] == 'GBR') & \n",
    "             (master_frame['raised_amount_usd'] >= 5) & \n",
    "             (master_frame['raised_amount_usd'] <= 15)]\n",
    "C2_gr = C2[['raised_amount_usd','main_sector']].groupby('main_sector').agg(['sum', 'count']).rename(\n",
    "    columns={'sum':'Total_amount','count' : 'Total_count'})\n",
    "C2 = C2.merge(C2_gr, how='left', on ='main_sector')\n",
    "C2.to_csv('C2.csv')\n",
    "C2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>company_permalink</th>\n",
       "      <th>raised_amount_usd</th>\n",
       "      <th>name</th>\n",
       "      <th>category_list</th>\n",
       "      <th>country_code</th>\n",
       "      <th>main_sector</th>\n",
       "      <th>(raised_amount_usd, Total_amount)</th>\n",
       "      <th>(raised_amount_usd, Total_count)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/organization/-fame</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>#fame</td>\n",
       "      <td>Media</td>\n",
       "      <td>IND</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>280.830000</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/organization/21diamonds-india</td>\n",
       "      <td>6.369507</td>\n",
       "      <td>21Diamonds</td>\n",
       "      <td>E-Commerce</td>\n",
       "      <td>IND</td>\n",
       "      <td>Others</td>\n",
       "      <td>1013.409507</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/organization/a-little-world</td>\n",
       "      <td>6.410000</td>\n",
       "      <td>A LITTLE WORLD</td>\n",
       "      <td>Finance</td>\n",
       "      <td>IND</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "      <td>550.549550</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/organization/adlabs-imagica</td>\n",
       "      <td>8.180000</td>\n",
       "      <td>Adlabs Imagica</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>IND</td>\n",
       "      <td>Entertainment</td>\n",
       "      <td>280.830000</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/organization/agile</td>\n",
       "      <td>5.740000</td>\n",
       "      <td>Agile</td>\n",
       "      <td>Finance</td>\n",
       "      <td>IND</td>\n",
       "      <td>Social, Finance, Analytics, Advertising</td>\n",
       "      <td>550.549550</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                company_permalink  raised_amount_usd            name  \\\n",
       "0             /organization/-fame          10.000000           #fame   \n",
       "1  /organization/21diamonds-india           6.369507      21Diamonds   \n",
       "2    /organization/a-little-world           6.410000  A LITTLE WORLD   \n",
       "3    /organization/adlabs-imagica           8.180000  Adlabs Imagica   \n",
       "4             /organization/agile           5.740000           Agile   \n",
       "\n",
       "   category_list country_code                              main_sector  \\\n",
       "0          Media          IND                            Entertainment   \n",
       "1     E-Commerce          IND                                   Others   \n",
       "2        Finance          IND  Social, Finance, Analytics, Advertising   \n",
       "3  Entertainment          IND                            Entertainment   \n",
       "4        Finance          IND  Social, Finance, Analytics, Advertising   \n",
       "\n",
       "   (raised_amount_usd, Total_amount)  (raised_amount_usd, Total_count)  \n",
       "0                         280.830000                                33  \n",
       "1                        1013.409507                               110  \n",
       "2                         550.549550                                60  \n",
       "3                         280.830000                                33  \n",
       "4                         550.549550                                60  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C3 = master_frame[(master_frame['country_code'] == 'IND') & \n",
    "             (master_frame['raised_amount_usd'] >= 5) & \n",
    "             (master_frame['raised_amount_usd'] <= 15)]\n",
    "C3_gr = C3[['raised_amount_usd','main_sector']].groupby('main_sector').agg(['sum', 'count']).rename(\n",
    "    columns={'sum':'Total_amount','count' : 'Total_count'})\n",
    "C3 = C3.merge(C3_gr, how='left', on ='main_sector')\n",
    "C3.to_csv('C3.csv')\n",
    "C3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12012\n",
      "619\n",
      "328\n"
     ]
    }
   ],
   "source": [
    "#Total number of investments (count)\n",
    "print(C1.raised_amount_usd.count())\n",
    "print(C2.raised_amount_usd.count())\n",
    "print(C3.raised_amount_usd.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "107318.29\n",
      "5365.23\n",
      "2949.54\n"
     ]
    }
   ],
   "source": [
    "#Total amount of investment (USD)\n",
    "print(round(C1.raised_amount_usd.sum(), 2))\n",
    "print(round(C2.raised_amount_usd.sum(), 2))\n",
    "print(round(C3.raised_amount_usd.sum(), 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">raised_amount_usd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Total_amount</th>\n",
       "      <th>Total_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_sector</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Automotive &amp; Sports</th>\n",
       "      <td>1454.104361</td>\n",
       "      <td>167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cleantech / Semiconductors</th>\n",
       "      <td>21206.628192</td>\n",
       "      <td>2300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Entertainment</th>\n",
       "      <td>5099.197982</td>\n",
       "      <td>591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Health</th>\n",
       "      <td>8211.859357</td>\n",
       "      <td>909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manufacturing</th>\n",
       "      <td>7258.553378</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>News, Search and Messaging</th>\n",
       "      <td>13959.567428</td>\n",
       "      <td>1582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Others</th>\n",
       "      <td>26321.007002</td>\n",
       "      <td>2950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social, Finance, Analytics, Advertising</th>\n",
       "      <td>23807.376964</td>\n",
       "      <td>2714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        raised_amount_usd            \n",
       "                                             Total_amount Total_count\n",
       "main_sector                                                          \n",
       "Automotive & Sports                           1454.104361         167\n",
       "Cleantech / Semiconductors                   21206.628192        2300\n",
       "Entertainment                                 5099.197982         591\n",
       "Health                                        8211.859357         909\n",
       "Manufacturing                                 7258.553378         799\n",
       "News, Search and Messaging                   13959.567428        1582\n",
       "Others                                       26321.007002        2950\n",
       "Social, Finance, Analytics, Advertising      23807.376964        2714"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top sector, second-top, third-top for D1 (based on count of investments)\n",
    "#Number of investments in the top, second-top, third-top sector in C1\n",
    "C1_gr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">raised_amount_usd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Total_amount</th>\n",
       "      <th>Total_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_sector</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Social, Finance, Analytics, Advertising</th>\n",
       "      <td>23807.376964</td>\n",
       "      <td>2714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Others</th>\n",
       "      <td>26321.007002</td>\n",
       "      <td>2950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>News, Search and Messaging</th>\n",
       "      <td>13959.567428</td>\n",
       "      <td>1582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manufacturing</th>\n",
       "      <td>7258.553378</td>\n",
       "      <td>799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Health</th>\n",
       "      <td>8211.859357</td>\n",
       "      <td>909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        raised_amount_usd            \n",
       "                                             Total_amount Total_count\n",
       "main_sector                                                          \n",
       "Social, Finance, Analytics, Advertising      23807.376964        2714\n",
       "Others                                       26321.007002        2950\n",
       "News, Search and Messaging                   13959.567428        1582\n",
       "Manufacturing                                 7258.553378         799\n",
       "Health                                        8211.859357         909"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C1_gr_plt = C1_gr.sort_values(by =\"main_sector\" ,ascending = False)\n",
    "C1_gr_plt.head()BB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'USA')"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C1_gr_plt.plot.bar()\n",
    "plt.title(\"USA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">raised_amount_usd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Total_amount</th>\n",
       "      <th>Total_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_sector</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Automotive &amp; Sports</th>\n",
       "      <td>167.051565</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cleantech / Semiconductors</th>\n",
       "      <td>1150.139665</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Entertainment</th>\n",
       "      <td>482.784687</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Health</th>\n",
       "      <td>214.537510</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manufacturing</th>\n",
       "      <td>361.940335</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>News, Search and Messaging</th>\n",
       "      <td>615.746235</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Others</th>\n",
       "      <td>1283.624289</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social, Finance, Analytics, Advertising</th>\n",
       "      <td>1089.404014</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        raised_amount_usd            \n",
       "                                             Total_amount Total_count\n",
       "main_sector                                                          \n",
       "Automotive & Sports                            167.051565          16\n",
       "Cleantech / Semiconductors                    1150.139665         128\n",
       "Entertainment                                  482.784687          56\n",
       "Health                                         214.537510          24\n",
       "Manufacturing                                  361.940335          42\n",
       "News, Search and Messaging                     615.746235          73\n",
       "Others                                        1283.624289         147\n",
       "Social, Finance, Analytics, Advertising       1089.404014         133"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top sector, second-top, third-top for D2 (based on count of investments)\n",
    "#Number of investments in the top, second-top, third-top sector in D2\n",
    "C2_gr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "C2_gr_plt = C2_gr.sort_values(by =\"main_sector\" ,ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'GBR')"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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tm/fTuXKlfn6668BSE5OJisriw8//JAVK1bg4eHBzz//zCeffMKcOXMICQlhypQptGnTRjlZuhdPT0++++47nJ2dOXPmDMOHD2fz5s0AnDx5kh07dlCxYkXatm1L79692bhxI0uXLmX58uV8/PHHSj+A4OBgVq9ezYQJE1i+fPl993n8+HEiIyOpXLkyL774IgcPHuSNN95gyZIl/PDDD8XqOjZ37lxWrVpFlSpVlGGzr776CkdHRyIiIjh58iRdunR54PfNM2LECD799FOefPJJZsyYwdy5c5k4cSIrVqxg6tSpNG3aFIA33niDcePGkZWVxfDhw9m+fXuRhuDeeOMN/vvf/2IymfK9zsHBgXXr1rF48WIGDhzIli1bqFChAm3btmXQoEFcuHCBtWvXsnHjRnJycujWrRv+/v5mZbvvJa8vQ973N3r0aE6dOmVW06lZs2bs37+/RBOArAQWViExMREXFxezbS1atFAO/gDLly/HYDDw/PPPExsbm68BSsOGDdm9ezfTpk1j//79uLi4cP78eU6fPs2rr77KM888Q3h4OHFxcSQnJ3Pr1i3atGkD5JZTvp+srCzeffddOnbsyFtvvcWZM2eUnzVv3hxvb2/s7e2pWbMmHTt2VOLJW09z6NAhXnrpJWVfBw4cKPQ7adGiBVWrVkWv19OkSRMuX75c6GsK4+fnx+jRo1m1apUytLZ//37lpLBx48Y0atSoWO+dmJjInTt3lKupl19+mf379xf43D179tC5c2eeeeYZ9u3bZ/Z93s+ePXuUjmX/fl1e74RGjRrRqFEjvLy8cHBwoHr16sTFxbF//366deuGo6Mjzs7OdOnSpUj/DnkHdF9f3/v+G3h6epZ48TzLmCMlxENycHDgzp07ZtvuLqAVFRXF7t27+fXXX3F0dKRXr175nl+nTh02b95MZGQkM2bMoGPHjnTp0oX69evz66+/mj331q1bRRpyyPPFF1/g5eXF9u3byczMxMfHR/nZ3fX89Xq98liv199z9kjevm1tbTEajUDubLysrKwC39fGxuaBZqLc/dnu/p4++eQTDh8+zO+//06nTp347bff8j3/UUtPT+fDDz8kIiICLy8vPvnkkyINO+W9bsuWLVSpUiXf6/K+L51Ol+/f5H7fna2trdlMyH/PiMu7j5rXN+Fe7ty5g4ODQ6Gf40FIAhCqKGza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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C2_gr_plt.plot.bar()\n",
    "plt.title(\"GBR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">raised_amount_usd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Total_amount</th>\n",
       "      <th>Total_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>main_sector</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Automotive &amp; Sports</th>\n",
       "      <td>136.900000</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cleantech / Semiconductors</th>\n",
       "      <td>165.380000</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Entertainment</th>\n",
       "      <td>280.830000</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Health</th>\n",
       "      <td>167.740000</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manufacturing</th>\n",
       "      <td>200.900000</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>News, Search and Messaging</th>\n",
       "      <td>433.834545</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Others</th>\n",
       "      <td>1013.409507</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Social, Finance, Analytics, Advertising</th>\n",
       "      <td>550.549550</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        raised_amount_usd            \n",
       "                                             Total_amount Total_count\n",
       "main_sector                                                          \n",
       "Automotive & Sports                            136.900000          13\n",
       "Cleantech / Semiconductors                     165.380000          20\n",
       "Entertainment                                  280.830000          33\n",
       "Health                                         167.740000          19\n",
       "Manufacturing                                  200.900000          21\n",
       "News, Search and Messaging                     433.834545          52\n",
       "Others                                        1013.409507         110\n",
       "Social, Finance, Analytics, Advertising        550.549550          60"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Top sector, second-top, third-top for D2 (based on count of investments)\n",
    "#Number of investments in the top, second-top, third-top sector in D3\n",
    "C3_gr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "C3_gr_plt = C3_gr.sort_values(by =\"main_sector\" ,ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'IND')"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C3_gr_plt.plot.bar()\n",
    "plt.title(\"IND\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           raised_amount_usd\n",
      "company_permalink                           \n",
      "/organization/virtustream               64.3\n",
      "                           raised_amount_usd\n",
      "company_permalink                           \n",
      "/organization/shotspotter          67.933006\n"
     ]
    }
   ],
   "source": [
    "#For the top sector USA , which company received the highest investment?\n",
    "company = C1[C1['main_sector']=='Others']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))\n",
    "\n",
    "#For the second top sector USA , which company received the highest investment?\n",
    "company = C1[C1['main_sector']=='Social, Finance, Analytics, Advertising']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                              raised_amount_usd\n",
      "company_permalink                              \n",
      "/organization/electric-cloud               37.0\n",
      "                                     raised_amount_usd\n",
      "company_permalink                                     \n",
      "/organization/celltick-technologies               37.5\n"
     ]
    }
   ],
   "source": [
    "#For the top sector GBR , which company received the highest investment?\n",
    "company = C2[C2['main_sector']=='Others']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))\n",
    "\n",
    "#For the second top sector GBR , which company received the highest investment?\n",
    "company = C2[C2['main_sector']=='Social, Finance, Analytics, Advertising']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            raised_amount_usd\n",
      "company_permalink                            \n",
      "/organization/firstcry-com               39.0\n",
      "                                                raised_amount_usd\n",
      "company_permalink                                                \n",
      "/organization/gupshup-technology-india-pvt-ltd               33.0\n"
     ]
    }
   ],
   "source": [
    "#For the top sector IND , which company received the highest investment?\n",
    "company = C3[C3['main_sector']=='Others']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))\n",
    "\n",
    "#For the second top sector IND , which company received the highest investment?\n",
    "company = C3[C3['main_sector']=='News, Search and Messaging']\n",
    "company = company.pivot_table(values = 'raised_amount_usd', index = 'company_permalink', aggfunc = 'sum')\n",
    "company = company.sort_values(by = 'raised_amount_usd', ascending = False).head()\n",
    "print(company.head(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 6: Plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For sector type Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x229429c4da0>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dd1.plot.bar()\n",
    "plt.title(\"Sector Analysis\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Country byse Analysis for Investment "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Country Byse Analysis of Investment (Billion USD)')"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "top9.plot.bar()\n",
    "plt.title(\"Country Byse Analysis of Investment (Billion USD)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Best sector in USA for investment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "C1_gr_plt = C1_gr.sort_values(by =\"main_sector\" ,ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'USA')"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C1_gr_plt.plot.bar()\n",
    "plt.title(\"USA\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Best sector in GBR for investment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "C2_gr_plt = C2_gr.sort_values(by =\"main_sector\" ,ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'GBR')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C2_gr_plt.plot.bar()\n",
    "plt.title(\"GBR\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Best sector in India for investment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "C3_gr_plt = C3_gr.sort_values(by =\"main_sector\" ,ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'IND')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ggplot')\n",
    "C3_gr_plt.plot.bar()\n",
    "plt.title(\"IND\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis Result :\n",
    "\n",
    "- #### Based on the data analysis performed, SparksFunds should invest in -\n",
    "\n",
    "    - Funding type - `Venture`.\n",
    "    - Countries - `USA`, `Britain` and `India`, respectively.\n",
    "    - Top two sectors to invest in are - `Others` and `Social, Finance, Analytics, Advertising`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
